#+author: Gandalf the white
#+description: My personnal emacs config file 
#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* personnal
#+begin_src emacs-lisp 
  (setq user-full-name "Spike Spiegel"
        user-mail-address "spikeandfaye@gmail.com")
#+end_src

* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)

  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* alias
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* paren
#+begin_src emacs-lisp 
  (use-package paren
    :config
    (show-paren-mode +1))

  (use-package elec-pair
    :config
    (electric-pair-mode +1))
#+end_src

* number and hight line
#+begin_src emacs-lisp 
  (use-package nlinum
    :config
    (global-nlinum-mode))

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package hl-line
    :config
    (global-hl-line-mode +1))

  (setq nlinum-highlight-current-line t)
  (setq nlinum-format "%4d \u2502 ")
#+end_src

* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

* treemacs
#+begin_src emacs-lisp 
  (use-package treemacs
    :bind
    (("C-c t" . treemacs)
     ("s-a" . treemacs)))
#+end_src

* org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Documents/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-startup-folded (quote overview))
   '(org-hide-leading-stars t)
   '(org-startup-indented t))

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "preview %s")
                  ) org-file-apps))

  (global-set-key "\C-ca" 'org-agenda)

  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))

  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/Documents/orgfiles/gcal.org"
                               "~/Documents/orgfiles/i.org"
                               "~/Documents/orgfiles/schedule.org"))

  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Documents/orgfiles/gcal.org" "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("n" "Note" entry (file+headline "~/Documents/orgfiles/notes.org" "Notes")
           "* Note %?\n%T")
          ("l" "Link" entry (file+headline "~/Documents/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Documents/orgfiles/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Documents/orgfiles/i.org" "To Do Items")
           "* %?\n%T" :prepend t)
          ("j" "Journal" entry (file+datetree "~/Documents/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("s" "Screencast" entry (file "~/Documents/orgfiles/screencastnotes.org")
           "* %?\n%i\n")))
#+END_SRC

* ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)))
#+END_SRC
  
* counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (setq enable-recursive-minibuffers t)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

#+END_SRC

* auto complete
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    ;;    :config (load-theme 'zenburn t)
    )

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :commands flycheck-mode
    :init
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode))

#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

* undo tree
#+begin_src emacs-lisp  
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

* misc packages
#+begin_src emacs-lisp 
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))

  ;; (use-package expand-region
  ;;   :ensure t
  ;;   :bind  ("C-=" . er/expand-region))
#+end_src

* magit
#+begin_src emacs-lisp 
  (use-package magit
    :ensure t
    :init
    (message "Loading Magit!")
    :config
    (message "Loaded Magit!")
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))
#+end_src

* c++
#+begin_src emacs-lisp 
  (use-package cmake-mode
    :ensure t
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

  (use-package cmake-font-lock
    :ensure t
    ;;    :after (cmake-mode)
    :hook (cmake-mode . cmake-font-lock-activate))

  ;; (use-package cmake-ide
  ;;   :after projectile
  ;;   :hook (c++-mode . my/cmake-ide-find-project)
  ;;   :preface
  ;;   (defun my/cmake-ide-find-project ()
  ;;     "Finds the directory of the project for cmake-ide."
  ;;     (with-eval-after-load 'projectile
  ;;       (setq cmake-ide-project-dir (projectile-project-root))
  ;;       (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
  ;;     (setq cmake-ide-compile-command 
  ;;           (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
  ;;     (cmake-ide-load-db))

  ;;   (defun my/switch-to-compilation-window ()
  ;;     "Switches to the *compilation* buffer after compilation."
  ;;     (other-window 1))
  ;;   :bind ([remap comment-region] . cmake-ide-compile)
  ;;   :init (cmake-ide-setup)
  ;;   :config (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window))

  (global-set-key "\C-ck" #'compile)

#+end_src

* lsp
#+begin_src emacs-lisp 
  ;; ;; set prefix for lsp-command-keymap (few alternatives - "s-l", "C-l")
  (setq lsp-keymap-prefix "C-c l")
  ;; (setq company-clang-executable "/usr/local/Cellar/llvm/12.0.0/bin/clang-12")
  ;; (setq lsp-clients-clangd-executable "/usr/local/Cellar/llvm/12.0.0/bin/clangd")

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook ((c-mode c++-mode cpp-mode-hook) . lsp)
    )

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode))

  (use-package company-lsp
    ;; company-mode completion
    :commands company-lsp
    :config (push 'company-lsp company-backends))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    ;;:ensure t
    :after treemacs
    ;; project wide overview
    :commands lsp-treemacs-errors-list)

  ;; (use-package dap-mode
  ;;   :commands (dap-debug dap-debug-edit-template))

#+end_src

* company
#+begin_src emacs-lisp 
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t))


  ;; (use-package irony
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'c++-mode-hook 'irony-mode)
  ;;   (add-hook 'c-mode-hook 'irony-mode)
  ;;   ;;    (add-hook 'objc-mode-hook 'irony-mode)
  ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; (use-package irony-eldoc
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'irony-mode-hook #'irony-eldoc))

  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config
  ;;   (add-to-list 'company-backend 'company-irony))

  ;; (use-package flycheck-irony
  ;;   :ensure t
  ;;   :config
  ;;   (eval-after-load 'flycheck
  ;;     '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
  ;;   )

#+end_src

* projectile
This will manage my workspaces
#+begin_src emacs-lisp 
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+end_src

* terraform
#+begin_src emacs-lisp 
  (use-package hcl-mode
    :mode "\\.nomad\\'")

  (use-package terraform-mode
    :hook
    (terraform-mode . company-mode)
    (terraform-mode . (lambda ()
                        (when (and (stringp buffer-file-name)
                                   (string-match "\\.tf\\(vars\\)?\\'" buffer-file-name))
                          (aggressive-indent-mode 0))))

    (before-save . terraform-format-buffer))
#+end_src
>
* dumb jump
#+begin_src emacs-lisp 
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+end_src

* load files
#+begin_src emacs-lisp 
  (defun load-if-exist (f)
    "load the file if exist"
    (if (file-readable-p f)
        (load-file f))) 

  (load-if-exist "~/Documents/shared/mu4econfig.el")
#+end_src


