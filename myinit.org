#+author: Gandalf the white
<#+description: My personnal emacs config file 
#+STARTUP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<F5>") 'revert-buffer)
#+END_SRC
* alias
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
  
* org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Documents/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-startup-folded (quote overview))
   '(org-hide-leading-stars t)
   '(org-startup-indented t))

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "preview %s")
                  ) org-file-apps))

  (global-set-key "\C-ca" 'org-agenda)

  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))

  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/Documents/orgfiles/gcal.org"
                               "~/Documents/orgfiles/i.org"
                               "~/Documents/orgfiles/schedule.org"))

  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Documents/orgfiles/gcal.org" "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("n" "Note" entry (file+headline "~/Documents/orgfiles/notes.org" "Notes")
           "* Note %?\n%T")
          ("l" "Link" entry (file+headline "~/Documents/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Documents/orgfiles/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Documents/orgfiles/i.org" "To Do Items")
           "* %?\n%T" :prepend t)
          ("j" "Journal" entry (file+datetree "~/Documents/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ("s" "Screencast" entry (file "~/Documents/orgfiles/screencastnotes.org")
           "* %?\n%i\n")))
#+END_SRC

* ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)))
#+END_SRC
  
* counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (setq enable-recursive-minibuffers t)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

#+END_SRC

* auto complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
  
* undo tree
#+begin_src emacs-lisp  
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

* misc packages
#+begin_src emacs-lisp 
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))

  (use-package expand-region
    :ensure t
    :bind  ("C-=" . er/expand-region))
#+end_src

* magit
#+begin_src emacs-lisp 
  (use-package magit
    :commands magit-status
    :bind ("C-x g" . magit-status))
#+end_src
* c++
#+begin_src emacs-lisp 
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )

  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+end_src
* company
#+begin_src emacs-lisp 
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t))
#+end_src

* web mode
#+begin_src emacs-lisp 
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
#+end_src

* load files
#+begin_src emacs-lisp 
  (defun load-if-exist (f)
    "load the file if exist"
    (if (file-readable-p f)
        (load-file f))) 

  (load-if-exist "~/Documents/shared/mu4econfig.el")
#+end_src


